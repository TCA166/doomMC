#include <check.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

#include "../../src/C/mcTypes.h"
#include "../../src/C/networkingMc.h"

#include <zlib.h>

#suite varInt

#test zero
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, 0);
    ck_assert_msg(buff[0] == 0x00, "buff[0] == 0");

#test one
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, 1);
    ck_assert_msg(buff[0] == 0x01, "buff[0] == 1");

#test hundredTwentyEight
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, 128);
    ck_assert_msg(buff[0] == 0x80 && buff[1] == 0x01, "buff == 128");

#test big
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, 2147483647);
    ck_assert_msg((buff[0] & buff[1] & buff[2] & buff[3]) == 0xff && buff[4] == 0x07, "buff == 2147483647");

#test negative
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, -1);
    ck_assert_msg((buff[0] & buff[1] & buff[2] & buff[3]) == 0xff && buff[4] == 0x0f, "buff == -1");

#test bigNegative
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, -2147483648);
    ck_assert_msg((buff[0] & buff[1] & buff[2] & buff[3]) == 0x80 && buff[4] == 0x08, "buff == -2147483648");

#test zeroRead
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, 0);
    ck_assert_int_eq(readVarInt(buff, NULL), 0);

#test oneRead
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, 1);
    ck_assert_int_eq(readVarInt(buff, NULL), 1);

#test hundredTwentyEightRead
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, 128);
    ck_assert_int_eq(readVarInt(buff, NULL), 128);

#test bigRead
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, 2147483647);
    ck_assert_int_eq(readVarInt(buff, NULL), 2147483647);

#test negativeRead
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, -1);
    ck_assert_int_eq(readVarInt(buff, NULL), -1);

#test bigNegativeRead
    byte buff[MAX_VAR_INT];
    writeVarInt(buff, -2147483648);
    ck_assert_int_eq(readVarInt(buff, NULL), -2147483648);

#suite bigEndian

#test bigEndianInt
    byte buff[sizeof(long)];
    writeBigEndianShort(buff, 1);
    ck_assert_int_eq(buff[1], 0x01);
    writeBigEndianInt(buff, 1);
    ck_assert_int_eq(buff[3], 0x01);
    writeBigEndianLong(buff, 1);

#test bigEndianFloat
    byte buff[sizeof(double)];
    //comparing to static values didn't work, probably yet another example of fucky floating point data
    double one = 1.0;
    writeBigEndianFloat(buff, (float)one);
    ck_assert_int_eq(buff[3], ((byte*)&one)[0]);
    writeBigEndianDouble(buff, one);
    ck_assert_int_eq(buff[7], ((byte*)&one)[0]);

#test bigEndianFloatRead
    byte buff[sizeof(double)];
    double val = 21474836.5555;
    writeBigEndianFloat(buff, (float)val);
    ck_assert_int_eq(val, readBigEndianFloat(buff, NULL));
    writeBigEndianDouble(buff, val);
    ck_assert_int_eq(val, readBigEndianDouble(buff, NULL));

#suite packedData

#test writePackedLongTest
    int32_t arr[16] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
    uint64_t test = writePackedLong(arr, 16, 0, 4);
    ck_assert_int_eq(test, -81985529216486896);

#test writePackedArrayTest
    int32_t arr[128];
    for(int i = 0; i < 128; i++){
        arr[i] = i;
    }
    byteArray res = writePackedArray(arr, 128, 6, false);
    ck_assert_int_eq(res.len, 13*8);
    ck_assert_int_eq(*(int64_t*)res.bytes, 4620706705508681730);

#suite angleChicanery

#test straightTest
    angle_t angle = toAngle(90.0f);
    ck_assert_int_eq(angle, 64);

#test cycleTest
    angle_t angle = toAngle(1800.0f);
    ck_assert_int_eq(angle, 0);

#test pointTest
    angle_t angle = toAngle(89.9f);
    ck_assert_int_eq(angle, 63);

#suite packetTests

#test compressedPacket
    int dummy[2];
    pipe(dummy);
    byte dummyData[] = "Hello, I am having needless problems with the Mojang client during testing <3";
    ssize_t written = sendPacket(dummy[1], sizeof(dummyData), 42, dummyData, 5);
    byte* writtenBuff = malloc(written);
    read(dummy[0], writtenBuff, written);
    int off = 0;
    int32_t packetLength = readVarInt(writtenBuff, &off);
    ck_assert_int_eq(packetLength, 81);
    int32_t uncompressed = readVarInt(writtenBuff, &off);
    ck_assert_int_eq(uncompressed, 1 + sizeof(dummyData));
    
#test noNeedToCompress
    int dummy[2];
    pipe(dummy);
    byte dummyData[] = "Hello";
    ssize_t written = sendPacket(dummy[1], sizeof(dummyData), 42, dummyData, 10);
    byte* writtenBuff = malloc(written);
    read(dummy[0], writtenBuff, written);
    int off = 0;
    int32_t packetLength = readVarInt(writtenBuff, &off);
    ck_assert_int_eq(packetLength, 8);
    int32_t uncompressed = readVarInt(writtenBuff, &off);
    ck_assert_int_eq(uncompressed, 0);